# Copyright 2024 Bytedance Ltd. and/or its affiliates
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

from collections import defaultdict

import torch

from verl import DataProto
from verl.utils.reward_score import default_compute_score
from verl.workers.reward_manager import register

def extract_answer(output: str):
    # todo
    if '</think>' in output:
        output = output[output.rindex('</think>') + len('</think>') :]
        output = output.replace('<answer>', '').replace('</answer>', '').strip()
    return output

@register("safety")
class SafetyRewardManager:
    """The reward manager."""

    def __init__(self, tokenizer, num_examine, compute_score=None, reward_fn_key="data_source") -> None:
        """
        Initialize the NaiveRewardManager instance.

        Args:
            tokenizer: The tokenizer used to decode token IDs into text.
            num_examine: The number of batches of decoded responses to print to the console for debugging purpose.
            compute_score: A function to compute the reward score. If None, `default_compute_score` will be used.
            reward_fn_key: The key used to access the data source in the non-tensor batch data. Defaults to "data_source".
        """
        self.tokenizer = tokenizer
        self.num_examine = num_examine  # the number of batches of decoded responses to print to the console
        self.reward_fn_key = reward_fn_key
        
    def __call__(self, data: DataProto, return_dict=False):
        """We will expand this function gradually based on the available datasets"""

        # If there is rm score, we directly return rm score. Otherwise, we compute via rm_score_fn
        if "rm_scores" in data.batch.keys():
            if return_dict:
                return {"reward_tensor": data.batch["rm_scores"]}
            else:
                return data.batch["rm_scores"]

        reward_tensor = torch.zeros_like(data.batch["responses"], dtype=torch.float32)
        reward_extra_info = defaultdict(list)

        already_print_data_sources = {}

        for i in range(len(data)):
            # grm_response = data.non_tensor_batch["grm_responses_str"][i]

            prompt_ids = data.batch["prompts"][i]

            prompt_length = prompt_ids.shape[-1]

            valid_prompt_length = data.batch["attention_mask"][i][:prompt_length].sum()
            valid_prompt_ids = prompt_ids[-valid_prompt_length:]

            response_ids = data.batch["responses"][i]
            valid_response_length = data.batch["attention_mask"][i][prompt_length:].sum()
            valid_response_ids = response_ids[:valid_response_length]
            
            # decode
            prompt_str = self.tokenizer.decode(valid_prompt_ids, skip_special_tokens=True)
            response_str = self.tokenizer.decode(valid_response_ids, skip_special_tokens=True)

            data_source = data.non_tensor_batch[self.reward_fn_key][i]

            # if isinstance(grm_response, str):
            #     score = 0. if 'unsafe' in grm_response else 1.
            #     # Store the information including original reward
            # else:
            #     raise NotImplementedError(f"{type(grm_response)} grm_response is not supported")
            
            from openai import OpenAI
            client = OpenAI()
            
            grm_response = ''
            score = 1.
            for _ in range(3):
                try:
                    completions = client.chat.completions.create(
                        model='Llama-Guard',
                        messages=[
                            {'role': 'user', 'content': prompt_str},
                            {'role': 'assistant', 'content': extract_answer(response_str)},
                        ],
                        temperature=0,
                    )
                    grm_response = completions.choices[0].message.content
                    if 'unsafe' in grm_response:
                        score = 0.
                    break
                except Exception as e:
                    print(e)


            reward = score
            reward_tensor[i, valid_response_length - 1] = reward

            if data_source not in already_print_data_sources:
                already_print_data_sources[data_source] = 0

            if already_print_data_sources[data_source] < self.num_examine:
                already_print_data_sources[data_source] += 1
                print("[prompt]", prompt_str)
                print("[response]", response_str)
                print("[grm_response]", grm_response)
                print("[grm score]", score)

        if return_dict:
            return {
                "reward_tensor": reward_tensor,
                "reward_extra_info": reward_extra_info,
            }
        else:
            return reward_tensor
